import { Telegraf, Markup, Context } from 'telegraf';
import axios, { AxiosError } from 'axios';
import { Update } from 'telegraf/types';
import * as Types from 'telegraf/types';
import dotenv from 'dotenv';
dotenv.config();

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã –¥–ª—è —Ç–∏–ø–∏–∑–∞—Ü–∏–∏
interface UserState {
  state: string;
  email?: string;
  isAdmin?: boolean;
  step?: string;
  material_data?: any;
  material_id?: string;
}

interface BotContext extends Context {
  userData?: {
    token?: string;
    role?: string;
    email?: string;
  };
}

const userSessions = new Map<number, BotContext['userData']>();

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const API_BASE_URL = 'http://localhost:4000';
const AUTH_URL = `${API_BASE_URL}/api/auth`;
const MATERIALS_URL = `${API_BASE_URL}/api/materials`;

// –°–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
const userStates: Record<number, UserState> = {};

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞


const bot = new Telegraf<BotContext>(process.env.TELEGRAM_BOT_TOKEN!);

// –ö–ª–∞—Å—Å –¥–ª—è –æ—à–∏–±–æ–∫ API
class APIError extends Error {
  constructor(message: string) {
    super(message);
    this.name = 'APIError';
  }
}

// –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ API
async function makeApiRequest(
  method: 'GET' | 'POST' | 'PUT' | 'DELETE',
  url: string,
  token?: string,
  data?: any
): Promise<any> {
  const headers = token ? { Authorization: `Bearer ${token}` } : undefined;

  try {
    const response = await axios({
      method,
      url,
      data,
      headers,
    });

    return response.data;
  } catch (error) {
    if (error instanceof AxiosError) {
      const errorMsg = error.response?.data?.message || 'Unknown error';
      throw new APIError(`API Error ${error.response?.status}: ${errorMsg}`);
    }
    throw new APIError('Request failed');
  }
}

// –ö–æ–º–∞–Ω–¥–∞ /start
bot.start(async (ctx) => {
  if (!ctx.from) return;

  let welcomeText = `–ü—Ä–∏–≤–µ—Ç, ${ctx.from.first_name}!\n\n–Ø –±–æ—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —É—á–µ–±–Ω—ã–º–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º–∏.\n\n–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n/login - –í–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É\n/register - –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è\n/materials - –ü—Ä–æ—Å–º–æ—Ç—Ä —É—á–µ–±–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤\n`;

  if (ctx.userData?.token) {
    const role = ctx.userData.role || 'user';
    welcomeText += `\n–í—ã –≤–æ—à–ª–∏ –∫–∞–∫ ${role}. `;
    if (role === 'admin') {
      welcomeText += '\n/admin - –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞';
    }
  }

  await ctx.reply(welcomeText);
});

// –ö–æ–º–∞–Ω–¥–∞ /register
bot.command('register', (ctx) => {
  if (!ctx.from) return;

  userStates[ctx.from.id] = { state: 'awaiting_email_for_register' };
  return ctx.reply(
    '–í–≤–µ–¥–∏—Ç–µ –≤–∞—à email –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:',
    Markup.inlineKeyboard([Markup.button.callback('–û—Ç–º–µ–Ω–∞', 'cancel_operation')])
  );
});

// –ö–æ–º–∞–Ω–¥–∞ /login
bot.command('login', (ctx) => {
  if (!ctx.from) return;

  userStates[ctx.from.id] = { state: 'awaiting_email_for_login' };
  return ctx.reply(
    '–í–≤–µ–¥–∏—Ç–µ –≤–∞—à email –¥–ª—è –≤—Ö–æ–¥–∞:',
    Markup.inlineKeyboard([Markup.button.callback('–û—Ç–º–µ–Ω–∞', 'cancel_operation')])
  );
});

// –ö–æ–º–∞–Ω–¥–∞ /materials
bot.command('materials', async (ctx) => {
  try {
    const materials = await makeApiRequest('GET', MATERIALS_URL);
    
    if (!materials || materials.length === 0) {
      return ctx.reply('–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤.');
    }

    for (const material of materials) {
      // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—ã
      const lectureDate = new Date(material.date).toLocaleDateString();
      const dueDate = new Date(material.homework_due).toLocaleDateString();
      
      // –°–æ–∑–¥–∞–µ–º –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –ø–µ—Ä–µ–Ω–æ—Å–æ–≤ —Å—Ç—Ä–æ–∫
      const messageText = [
        `üìö –ü—Ä–µ–¥–º–µ—Ç: ${material.subject}`,
        `üë®‚Äçüè´ –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: ${material.lecturer}`,
        `üìñ –¢–µ–º–∞: ${material.title}`,
        `üìÖ –î–∞—Ç–∞ –ª–µ–∫—Ü–∏–∏: ${lectureDate}`,
        '',
        `üìù –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ:`,
        material.content.replace(/\\n/g, '\n'), 
        '',
        `üìã –î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ:`,
        material.homework.replace(/\\n/g, '\n'), 
        `‚è≥ –°—Ä–æ–∫ —Å–¥–∞—á–∏: ${dueDate}`
      ].join('\n');

      const buttons = [];
      if (ctx.userData?.role === 'admin') {
        buttons.push([
          Markup.button.callback('‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å', `edit_${material.id}`),
          Markup.button.callback('üóë –£–¥–∞–ª–∏—Ç—å', `delete_${material.id}`)
        ]);
      }

      await ctx.reply(messageText, {
        parse_mode: 'Markdown', // –î–ª—è –ª—É—á—à–µ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        ...Markup.inlineKeyboard(buttons)
      });
    }
  } catch (error) {
    console.error('Error fetching materials:', error);
    await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤.');
  }
});

// –ö–æ–º–∞–Ω–¥–∞ /admin
bot.command('admin', async (ctx) => {
  if (!ctx.from) return;
  console.error('User role:', ctx.userData?.role);
  if (ctx.userData?.role !== 'admin') {
    return ctx.reply('–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.');
  }
  
  return ctx.reply(
    '–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:',
    Markup.inlineKeyboard([
      [Markup.button.callback('‚ûï –î–æ–±–∞–≤–∏—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª', 'add_material')],
      [Markup.button.callback('üìã –°–ø–∏—Å–æ–∫ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤', 'list_materials')]
    ])
  );
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
bot.on('text', async (ctx) => {
  if (!ctx.from) return;

  const userId = ctx.from.id;
  const userState = userStates[userId];
  const currentState = userState?.state;
  const text = ctx.message.text;

  if (!currentState) {
    return ctx.reply('–Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç—É –∫–æ–º–∞–Ω–¥—É. –í–≤–µ–¥–∏—Ç–µ /start –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥.');
  }

  if (currentState === 'awaiting_email_for_register') {
  // –ë–∞–∑–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ email
  if (!text.includes('@') || !text.includes('.')) {
    return ctx.reply('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:');
  }

  userStates[userId] = {
    state: 'awaiting_password_for_register',
    email: text,
    isAdmin: text.startsWith('admin@') // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–æ–ª—å –ø–æ –ø—Ä–µ—Ñ–∏–∫—Å—É email
  };
  return ctx.reply('–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:');
}

if (currentState === 'awaiting_password_for_register') {
  const email = userState.email;
  const password = text;
  const isAdmin = userState.isAdmin; // –ü–æ–ª—É—á–∞–µ–º —Ñ–ª–∞–≥ –∞–¥–º–∏–Ω–∞

  try {
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π —Ä–æ–ª—å—é
    const response = await makeApiRequest('POST', `${AUTH_URL}/register`, undefined, {
      email,
      password,
      role: isAdmin ? 'admin' : 'user' // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ —Ä–æ–ª–∏
    });

    if (isAdmin) {
      await ctx.replyWithMarkdown(`
      üéâ *–í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†!*
      
      –¢–µ–ø–µ—Ä—å –≤–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É /login 

      –í–∞—à–∏ –ø—Ä–∏–≤–∏–ª–µ–≥–∏–∏:
      ‚Ä¢ –î–æ—Å—Ç—É–ø –∫ –ø–∞–Ω–µ–ª–∏ /admin
      ‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É—á–µ–±–Ω—ã–º–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º–∏
      ‚Ä¢ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
      `);
    } else {
      await ctx.reply('‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å');
    }
  } catch (error) {
    console.error('Registration error:', error);
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: ');
  } finally {
    delete userStates[userId];
  }
}

  if (currentState === 'awaiting_email_for_login') {
    userStates[userId] = {
      state: 'awaiting_password_for_login',
      email: text,
    };
    return ctx.reply('–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:');
  }

  if (currentState === 'awaiting_password_for_login') {
    const email = userState.email;
    const password = text;

    try {
      const response = await makeApiRequest('POST', `${AUTH_URL}/login`, undefined, {
        email,
        password,
      });

      if (!ctx.userData) ctx.userData = {};
      ctx.userData.token = response.token;
      ctx.userData.role = response.role || 'user';
      ctx.userData.email = email;
      let answText =`–í—Ö–æ–¥ —É—Å–ø–µ—à–µ–Ω! –í–∞—à–∞ —Ä–æ–ª—å: ${ctx.userData.role}\n` +
        '–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª—ã —Å –ø–æ–º–æ—â—å—é /materials';
      if (ctx.userData.role=== 'admin'){
        answText += '\n/admin - –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞';
      }
      return ctx.reply(
        answText
      );
    } catch (error) {
      console.error('Login error:', error);
      return ctx.reply('–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ email –∏ –ø–∞—Ä–æ–ª—å.');
    } finally {
      delete userStates[userId];
    }
  }

  if (currentState === 'adding_material') {
    const step = userState.step;
    const materialData = userState.material_data || {};

    if (step === 'subject') {
      materialData.subject = text;
      userStates[userId].step = 'lecturer';
      userStates[userId].material_data = materialData;
      return ctx.reply('–í–≤–µ–¥–∏—Ç–µ –§–ò–û –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è:');
    }

    if (step === 'lecturer') {
      materialData.lecturer = text;
      userStates[userId].step = 'title';
      return ctx.reply('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ª–µ–∫—Ü–∏–∏:');
    }

    if (step === 'title') {
      materialData.title = text;
      userStates[userId].step = 'content';
      return ctx.reply('–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –ª–µ–∫—Ü–∏–∏:');
    }

    if (step === 'content') {
      materialData.content = text;
      userStates[userId].step = 'homework';
      return ctx.reply('–í–≤–µ–¥–∏—Ç–µ –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ:');
    }

    if (step === 'homework') {
      materialData.homework = text;
      userStates[userId].step = 'date';
      return ctx.reply('–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –ª–µ–∫—Ü–∏–∏ (–≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î):');
    }

    if (step === 'date') {
      materialData.date = text;
      userStates[userId].step = 'homework_due';
      return ctx.reply('–í–≤–µ–¥–∏—Ç–µ —Å—Ä–æ–∫ —Å–¥–∞—á–∏ –î–ó (–≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î):');
    }

    if (step === 'homework_due') {
      materialData.homework_due = text;

      try {
        if (!ctx.userData?.token) {
          throw new APIError('–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É');
        }

        await makeApiRequest('POST', MATERIALS_URL, ctx.userData.token, materialData);
        return ctx.reply('–ú–∞—Ç–µ—Ä–∏–∞–ª —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!');
      } catch (error) {
        console.error('Error adding material:', error);
        return ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–∞.');
      } finally {
        delete userStates[userId];
      }
    }
  }

  if (currentState === 'editing_material') {
    const step = userState.step;
    const materialId = userState.material_id;
    const materialData = userState.material_data || {};

    if (step === 'subject' && text !== '-') {
      materialData.subject = text;
    }

    if (step === 'subject') {
      userStates[userId].step = 'lecturer';
      return ctx.reply(
        `–¢–µ–∫—É—â–µ–µ –§–ò–û –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è: ${materialData.lecturer}\n` +
        '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –§–ò–û –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ "-" —á—Ç–æ–±—ã –æ—Å—Ç–∞–≤–∏—Ç—å –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π:'
      );
    }

    if (step === 'lecturer' && text !== '-') {
      materialData.lecturer = text;
    }

    if (step === 'lecturer') {
      userStates[userId].step = 'title';
      return ctx.reply(
        `–¢–µ–∫—É—â–µ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ª–µ–∫—Ü–∏–∏: ${materialData.title}\n` +
        '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ "-" —á—Ç–æ–±—ã –æ—Å—Ç–∞–≤–∏—Ç—å –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π:'
      );
    }

    if (step === 'title' && text !== '-') {
      materialData.title = text;
    }

    if (step === 'title') {
      userStates[userId].step = 'content';
      return ctx.reply(
        `–¢–µ–∫—É—â–∏–π —Ç–µ–∫—Å—Ç –ª–µ–∫—Ü–∏–∏: ${materialData.content}\n` +
        '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ "-" —á—Ç–æ–±—ã –æ—Å—Ç–∞–≤–∏—Ç—å –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π:'
      );
    }

    if (step === 'content' && text !== '-') {
      materialData.content = text;
    }

    if (step === 'content') {
      userStates[userId].step = 'homework';
      return ctx.reply(
        `–¢–µ–∫—É—â–µ–µ –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ: ${materialData.homework}\n` +
        '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ "-" —á—Ç–æ–±—ã –æ—Å—Ç–∞–≤–∏—Ç—å –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π:'
      );
    }

    if (step === 'homework' && text !== '-') {
      materialData.homework = text;
    }

    if (step === 'homework') {
      userStates[userId].step = 'date';
      return ctx.reply(
        `–¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞ –ª–µ–∫—Ü–∏–∏: ${materialData.date}\n` +
        '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –¥–∞—Ç—É (–ì–ì–ì–ì-–ú–ú-–î–î) –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ "-" —á—Ç–æ–±—ã –æ—Å—Ç–∞–≤–∏—Ç—å –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π:'
      );
    }

    if (step === 'date' && text !== '-') {
      materialData.date = text;
    }

    if (step === 'date') {
      userStates[userId].step = 'homework_due';
      return ctx.reply(
        `–¢–µ–∫—É—â–∏–π —Å—Ä–æ–∫ —Å–¥–∞—á–∏ –î–ó: ${materialData.homework_due}\n` +
        '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Å—Ä–æ–∫ (–ì–ì–ì–ì-–ú–ú-–î–î) –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ "-" —á—Ç–æ–±—ã –æ—Å—Ç–∞–≤–∏—Ç—å –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π:'
      );
    }

    if (step === 'homework_due') {
      if (text !== '-') {
        materialData.homework_due = text;
      }

      try {
        if (!ctx.userData?.token) {
          throw new APIError('–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É');
        }

        await makeApiRequest(
          'PUT',
          `${MATERIALS_URL}/${materialId}`,
          ctx.userData.token,
          materialData
        );
        return ctx.reply('–ú–∞—Ç–µ—Ä–∏–∞–ª —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!');
      } catch (error) {
        console.error('Error updating material:', error);
        return ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–∞.');
      } finally {
        delete userStates[userId];
      }
    }
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–æ–≤
bot.action(/.*/, async (ctx) => {
  if (!ctx.from || !ctx.match) return;

  const data = ctx.match[0];
  
  if (data === 'cancel_operation') {
    delete userStates[ctx.from.id];
    return ctx.editMessageText('–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.');
  }

  if (data === 'add_material') {
    return addMaterialStart(ctx);
  }

  if (data === 'list_materials') {
    return ctx.editMessageText('–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /materials –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤');
  }

  if (data.startsWith('edit_')) {
    const materialId = data.split('_')[1];
    return editMaterialStart(ctx, materialId);
  }

  if (data.startsWith('delete_')) {
    const materialId = data.split('_')[1];
    return deleteMaterial(ctx, materialId);
  }
});

// –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
bot.launch().then(() => {
  console.log('Bot started');
});

process.once('SIGINT', () => bot.stop('SIGINT'));
process.once('SIGTERM', () => bot.stop('SIGTERM'));

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
async function addMaterialStart(ctx: BotContext) {
  if (!ctx.from) return;
  if (ctx.userData?.role !== 'admin') {
    return ctx.editMessageText('–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.');
  }

  userStates[ctx.from.id] = {
    state: 'adding_material',
    step: 'subject',
    material_data: {},
  };

  return ctx.editMessageText('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞:');
}

async function editMaterialStart(ctx: BotContext, materialId: string) {
  if (!ctx.from) return;

  try {
    const material = await makeApiRequest('GET', `${MATERIALS_URL}/${materialId}`);
    
    userStates[ctx.from.id] = {
      state: 'editing_material',
      material_id: materialId,
      material_data: material,
      step: 'subject',
    };

    return ctx.editMessageText(
      `–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–∞. –¢–µ–∫—É—â–µ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞: ${material.subject}\n` +
      '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ "-" —á—Ç–æ–±—ã –æ—Å—Ç–∞–≤–∏—Ç—å –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π:'
    );
  } catch (error) {
    console.error('Error fetching material:', error);
    return ctx.editMessageText('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–∞.');
  }
}

async function deleteMaterial(ctx: BotContext, materialId: string) {
  if (!ctx.from) return;

  try {
    if (!ctx.userData?.token) {
      throw new APIError('–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É');
    }

    await makeApiRequest(
      'DELETE',
      `${MATERIALS_URL}/${materialId}`,
      ctx.userData.token
    );
    return ctx.editMessageText('–ú–∞—Ç–µ—Ä–∏–∞–ª —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!');
  } catch (error) {
    console.error('Error deleting material:', error);
    return ctx.editMessageText('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–∞.');
  }
}